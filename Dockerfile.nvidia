# SLAM-Share with NVIDIA GPU Support
# Based on NVIDIA CUDA runtime for proper EGL/OpenGL support
FROM nvidia/cuda:11.8.0-devel-ubuntu20.04

# Prevent interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    pkg-config \
    software-properties-common \
    lsb-release \
    gnupg2 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install ROS Noetic
RUN echo "deb http://packages.ros.org/ros/ubuntu focal main" > /etc/apt/sources.list.d/ros-latest.list && \
    apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 && \
    apt-get update && \
    apt-get install -y \
        ros-noetic-desktop-full \
        ros-noetic-roscpp \
        ros-noetic-tf \
        ros-noetic-cv-bridge \
        ros-noetic-image-transport \
        ros-noetic-sensor-msgs \
        python3-rosdep \
        python3-rosinstall \
        python3-rosinstall-generator \
        python3-wstool \
        python3-catkin-tools && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init && rosdep update

# Setup ROS environment
RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc
ENV ROS_MASTER_URI=http://localhost:11311
ENV ROS_HOSTNAME=localhost
ENV ROS_DISTRO=noetic

# Install NVIDIA OpenGL and EGL libraries
RUN apt-get update && apt-get install -y \
    # NVIDIA OpenGL libraries
    libgl1-mesa-glx \
    libegl1-mesa \
    libgles2-mesa \
    # X11 and OpenGL development
    libx11-dev libxext-dev libxrender-dev \
    libxinerama-dev libxi-dev libxrandr-dev \
    libxcursor-dev libxdamage-dev libxcomposite-dev \
    libxtst-dev libxss-dev libxft-dev \
    # OpenGL utilities
    mesa-utils \
    # GTK for OpenCV
    libgtk-3-dev libgtk2.0-dev \
    # Additional OpenGL libraries
    libglew-dev \
    freeglut3-dev \
    libglfw3-dev \
    && rm -rf /var/lib/apt/lists/*

# Install SLAM-Share dependencies
RUN apt-get update && apt-get install -y \
    libeigen3-dev \
    libboost-all-dev \
    libssl-dev \
    libopencv-dev \
    libopencv-contrib-dev \
    libpng-dev \
    libjpeg-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    && rm -rf /var/lib/apt/lists/*

# Install OpenCV 4.10.0 with CUDA support
WORKDIR /opt
RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/4.10.0.zip && \
    wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.10.0.zip && \
    unzip opencv.zip && unzip opencv_contrib.zip && \
    mkdir -p opencv-4.10.0/build

WORKDIR /opt/opencv-4.10.0/build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib-4.10.0/modules \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D WITH_CUDA=ON \
    -D WITH_CUDNN=ON \
    -D OPENCV_DNN_CUDA=ON \
    -D ENABLE_FAST_MATH=1 \
    -D CUDA_FAST_MATH=1 \
    -D CUDA_ARCH_BIN=7.5,8.0,8.6 \
    -D WITH_CUBLAS=1 \
    -D BUILD_EXAMPLES=OFF \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D INSTALL_C_EXAMPLES=OFF \
    -D PYTHON_EXECUTABLE=$(which python3) \
    -D BUILD_opencv_python2=OFF \
    .. && \
    make -j$(nproc) && \
    make install && \
    ldconfig

# Install Pangolin with NVIDIA support
WORKDIR /opt
RUN git clone --recursive https://github.com/stevenlovegrove/Pangolin.git && \
    cd Pangolin && \
    git checkout v0.6 && \
    mkdir build && cd build && \
    cmake -D CMAKE_BUILD_TYPE=Release \
          -D BUILD_PANGOLIN_GUI=ON \
          -D BUILD_PANGOLIN_OPENGL=ON \
          .. && \
    make -j$(nproc) && \
    make install

# Copy SLAM-Share source from previous build
COPY . /slam-share/

# Extract vocabulary
WORKDIR /slam-share
RUN cd Vocabulary && \
    tar -xf ORBvoc.txt.tar.gz

# Build DBoW2
RUN cd Thirdparty/DBoW2 && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make -j$(nproc)

# Build g2o
RUN cd Thirdparty/g2o && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make -j$(nproc)

# Build main SLAM-Share library
RUN cd /slam-share && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release && \
    make -j$(nproc)

# Build ROS nodes with NVIDIA support
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash && \
    export ROS_PACKAGE_PATH=/slam-share/Examples/ROS/ORB_SLAM3:\$ROS_PACKAGE_PATH && \
    cd Examples/ROS/ORB_SLAM3 && \
    mkdir -p build && cd build && \
    cmake .. -DROS_BUILD_TYPE=Release && \
    make -j\$(nproc)"

# Set NVIDIA environment variables
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=graphics,utility,compute
ENV QT_X11_NO_MITSHM=1

# Create NVIDIA-optimized startup script
RUN echo '#!/bin/bash' > /start-slam-nvidia.sh && \
    echo 'echo "=== SLAM-Share NVIDIA GPU Server ==="' >> /start-slam-nvidia.sh && \
    echo 'source /opt/ros/noetic/setup.bash' >> /start-slam-nvidia.sh && \
    echo 'export ROS_MASTER_URI=http://slam-server:11311' >> /start-slam-nvidia.sh && \
    echo 'export ROS_HOSTNAME=slam-server' >> /start-slam-nvidia.sh && \
    echo 'export ROS_PACKAGE_PATH=/slam-share/Examples/ROS/ORB_SLAM3:$ROS_PACKAGE_PATH' >> /start-slam-nvidia.sh && \
    echo 'export DISPLAY=$DISPLAY' >> /start-slam-nvidia.sh && \
    echo 'echo "🚀 Starting ROS Master..."' >> /start-slam-nvidia.sh && \
    echo 'rosmaster --core -p 11311 &' >> /start-slam-nvidia.sh && \
    echo 'sleep 15' >> /start-slam-nvidia.sh && \
    echo 'echo "🎮 GPU Info:"' >> /start-slam-nvidia.sh && \
    echo 'nvidia-smi || echo "NVIDIA GPU not available"' >> /start-slam-nvidia.sh && \
    echo 'echo "🖥️  OpenGL Info:"' >> /start-slam-nvidia.sh && \
    echo 'glxinfo | head -10 || echo "OpenGL not available"' >> /start-slam-nvidia.sh && \
    echo 'echo "🎯 Starting SLAM with NVIDIA acceleration..."' >> /start-slam-nvidia.sh && \
    echo 'cd /slam-share/Examples/ROS/ORB_SLAM3' >> /start-slam-nvidia.sh && \
    echo 'rosrun ORB_SLAM3 Mono /slam-share/Vocabulary/ORBvoc.txt /slam-share-ros-server/config/Asus.yaml' >> /start-slam-nvidia.sh && \
    chmod +x /start-slam-nvidia.sh

# Set library paths
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH

# Clean up
RUN rm -rf /opt/opencv.zip /opt/opencv_contrib.zip /opt/opencv-4.10.0 /opt/opencv_contrib-4.10.0

WORKDIR /slam-share

CMD ["/start-slam-nvidia.sh"]