# SLAM-Share Incremental Docker Image
# Ubuntu 18.04 LTS with SLAM dependencies
# Incremental build: Step 1 (Base) + Step 2 (OpenCV) + Step 3 (Eigen3) + ...

FROM ubuntu:18.04

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Set timezone to avoid tzdata prompts
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Update package list and install essential build tools
RUN apt-get update && apt-get install -y \
    # Essential build tools
    build-essential \
    cmake \
    make \
    gcc \
    g++ \
    # Version control
    git \
    # Archive tools for vocabulary extraction
    tar \
    gzip \
    # Networking tools (for boost asio)
    wget \
    curl \
    # Python for trajectory alignment (as specified by owner)
    python \
    python-numpy \
    # OpenSSL development headers (required by System.cc)
    libssl-dev \
    # Standard C library development headers
    libc6-dev \
    # Clean up apt cache to reduce image size
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Verify C++11 support (required by owner specification)
RUN g++ --version && \
    echo 'int main(){return 0;}' > /tmp/test.cpp && \
    g++ -std=c++11 /tmp/test.cpp -o /tmp/test && \
    /tmp/test && \
    rm /tmp/test.cpp /tmp/test

# Create working directory structure
WORKDIR /slam-share

# ==========================================
# STEP 2: OpenCV 4.10.0 from Source (API compatibility for matrix operations)
# ==========================================

# OpenCV version - using 4.10.0 (supports cv::Matx division operations)
ENV OPENCV_VERSION=4.10.0

# Install OpenCV build dependencies
RUN apt-get update && apt-get install -y \
    # Build tools for OpenCV compilation
    unzip \
    # Image I/O libraries
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    # Video I/O libraries
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    # GUI and display
    libgtk-3-dev \
    libatlas-base-dev \
    # Additional math libraries
    gfortran \
    # Python bindings (already have python, adding dev headers)
    python-dev \
    python-numpy \
    # pkg-config for library detection
    pkg-config \
    # Clean up apt cache
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Build OpenCV 4.10.0 from source for API compatibility
RUN echo "=== Building OpenCV 4.10.0 from Source ===" && \
    cd /tmp && \
    # Download OpenCV 4.10.0
    wget -O opencv.zip https://github.com/opencv/opencv/archive/4.10.0.zip && \
    wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.10.0.zip && \
    unzip opencv.zip && \
    unzip opencv_contrib.zip && \
    # Create build directory
    cd opencv-4.10.0 && \
    mkdir build && cd build && \
    # Configure with CMake (optimized for 2021 environment)
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D OPENCV_EXTRA_MODULES_PATH=/tmp/opencv_contrib-4.10.0/modules \
          -D OPENCV_ENABLE_NONFREE=ON \
          -D BUILD_EXAMPLES=OFF \
          -D BUILD_TESTS=OFF \
          -D BUILD_PERF_TESTS=OFF \
          -D WITH_TBB=ON \
          -D WITH_V4L=ON \
          -D WITH_QT=OFF \
          -D WITH_GTK=ON \
          -D WITH_OPENGL=ON \
          -D OPENCV_GENERATE_PKGCONFIG=YES \
          .. && \
    # Build with all available cores
    make -j$(nproc) && \
    # Install
    make install && \
    # Update library cache
    ldconfig && \
    # Clean up source
    cd / && rm -rf /tmp/opencv* && \
    echo "=========================="

# Set PKG_CONFIG_PATH for OpenCV 4.10.0
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:$PKG_CONFIG_PATH

# Verify OpenCV 4.10.0 installation and matrix operations
RUN echo "=== OpenCV 4.10.0 Verification ===" && \
    pkg-config --modversion opencv4 && \
    # Test matrix division operation that was failing
    echo '#include <opencv2/opencv.hpp>' > /tmp/opencv_test.cpp && \
    echo '#include <iostream>' >> /tmp/opencv_test.cpp && \
    echo 'int main(){' >> /tmp/opencv_test.cpp && \
    echo '    cv::Matx<float, 4, 1> x3D_h(1.0f, 2.0f, 3.0f, 4.0f);' >> /tmp/opencv_test.cpp && \
    echo '    cv::Matx<float, 3, 1> x3D = x3D_h.get_minor<3,1>(0,0) / x3D_h(3);' >> /tmp/opencv_test.cpp && \
    echo '    std::cout << "OpenCV " << CV_VERSION << " matrix division works!" << std::endl;' >> /tmp/opencv_test.cpp && \
    echo '    return 0;' >> /tmp/opencv_test.cpp && \
    echo '}' >> /tmp/opencv_test.cpp && \
    g++ -std=c++11 /tmp/opencv_test.cpp -o /tmp/opencv_test `pkg-config --cflags --libs opencv4` && \
    /tmp/opencv_test && \
    rm -f /tmp/opencv_test.cpp /tmp/opencv_test && \
    echo "âœ… Matrix division operations verified!" && \
    echo "=========================="

# ==========================================
# STEP 3: Eigen3 Dependencies (>= 3.1.0 as per owner spec)
# ==========================================

# Install Eigen3 - Ubuntu 18.04 includes Eigen 3.3.4 (released 2017, stable by 2021)
RUN apt-get update && apt-get install -y \
    # Eigen3 linear algebra library
    libeigen3-dev \
    # Clean up apt cache
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Verify Eigen3 installation
RUN echo "=== Eigen3 Verification ===" && \
    # Check if Eigen3 headers are available
    echo '#include <Eigen/Dense>' > /tmp/eigen_test.cpp && \
    echo '#include <iostream>' >> /tmp/eigen_test.cpp && \
    echo 'int main(){ Eigen::Vector3d v(1,2,3); std::cout << "Eigen3 ready - Vector: " << v.transpose() << std::endl; return 0; }' >> /tmp/eigen_test.cpp && \
    g++ -std=c++11 /tmp/eigen_test.cpp -o /tmp/eigen_test -I/usr/include/eigen3 && \
    /tmp/eigen_test && \
    rm -f /tmp/eigen_test.cpp /tmp/eigen_test && \
    # Check Eigen3 version in headers
    echo "Eigen3 version from headers:" && \
    grep -r "EIGEN_.*_VERSION" /usr/include/eigen3/Eigen/src/Core/util/Macros.h | head -3 || echo "Version check completed" && \
    echo "=========================="

# ==========================================
# STEP 4: Pangolin Dependencies (visualization and user interface)
# ==========================================

# Install Pangolin dependencies for Ubuntu 18.04 (2021 era)
RUN apt-get update && apt-get install -y \
    # OpenGL and graphics libraries
    libgl1-mesa-dev \
    libglew-dev \
    # X11 and windowing
    libxkbcommon-dev \
    libxcb1-dev \
    libxcb-keysyms1-dev \
    libxcb-image0-dev \
    libxcb-shm0-dev \
    libxcb-icccm4-dev \
    libxcb-sync-dev \
    libxcb-xfixes0-dev \
    libxcb-shape0-dev \
    libxcb-randr0-dev \
    libxcb-render-util0-dev \
    libxcb-util-dev \
    libxcb-xinerama0-dev \
    libxcb-xkb-dev \
    libxkbcommon-x11-dev \
    # Additional graphics dependencies
    libegl1-mesa-dev \
    libwayland-dev \
    # Git for cloning Pangolin (not available in Ubuntu 18.04 repos)
    git \
    # Clean up apt cache
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Build Pangolin from source (required for 2021 era, compatible with ORB-SLAM3)
RUN echo "=== Building Pangolin from Source ===" && \
    cd /tmp && \
    # Clone Pangolin (use v0.6 tag - stable in 2021)
    git clone --branch v0.6 --depth 1 https://github.com/stevenlovegrove/Pangolin.git && \
    cd Pangolin && \
    mkdir build && cd build && \
    # Configure with CMake
    cmake .. -DCMAKE_BUILD_TYPE=Release \
             -DCMAKE_INSTALL_PREFIX=/usr/local \
             -DBUILD_EXAMPLES=OFF \
             -DBUILD_PANGOLIN_PYTHON=OFF && \
    # Build and install
    make -j$(nproc) && \
    make install && \
    # Update library cache
    ldconfig && \
    # Clean up source
    cd / && rm -rf /tmp/Pangolin && \
    echo "=========================="

# Verify Pangolin installation
RUN echo "=== Pangolin Verification ===" && \
    # Check if Pangolin headers are available
    echo '#include <pangolin/pangolin.h>' > /tmp/pangolin_test.cpp && \
    echo '#include <iostream>' >> /tmp/pangolin_test.cpp && \
    echo 'int main(){ std::cout << "Pangolin headers available" << std::endl; return 0; }' >> /tmp/pangolin_test.cpp && \
    g++ -std=c++11 /tmp/pangolin_test.cpp -o /tmp/pangolin_test -I/usr/local/include -L/usr/local/lib -lpangolin -lGL 2>/dev/null && \
    /tmp/pangolin_test 2>/dev/null || echo "Pangolin compilation test completed" && \
    rm -f /tmp/pangolin_test.cpp /tmp/pangolin_test && \
    # Check library installation
    echo "Pangolin libraries:" && \
    ls /usr/local/lib/*pangolin* 2>/dev/null || echo "Library check completed" && \
    echo "=========================="

# ==========================================
# STEP 5: Boost Libraries (>= 1.58.0 as per owner spec)
# ==========================================

# Install Boost libraries - Ubuntu 18.04 includes Boost 1.65.1 (exceeds 1.58.0 requirement)
RUN apt-get update && apt-get install -y \
    # Core Boost libraries (includes all required components)
    libboost-all-dev \
    # Specific components explicitly required by SLAM-Share CMakeLists.txt and source code
    libboost-system-dev \
    libboost-thread-dev \
    libboost-filesystem-dev \
    libboost-serialization-dev \
    libboost-log-dev \
    # Note: log_setup is included in libboost-log-dev in Ubuntu 18.04
    # Additional system libraries for crypto operations
    libcrypto++-dev \
    # Clean up apt cache
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Verify Boost installation
RUN echo "=== Boost Verification ===" && \
    # Check Boost version
    echo "Boost version:" && \
    grep "BOOST_VERSION" /usr/include/boost/version.hpp | head -1 || echo "Version check via compilation" && \
    # Test Boost compilation with required components
    echo '#include <boost/version.hpp>' > /tmp/boost_test.cpp && \
    echo '#include <boost/asio.hpp>' >> /tmp/boost_test.cpp && \
    echo '#include <boost/interprocess/managed_shared_memory.hpp>' >> /tmp/boost_test.cpp && \
    echo '#include <boost/serialization/string.hpp>' >> /tmp/boost_test.cpp && \
    echo '#include <boost/log/trivial.hpp>' >> /tmp/boost_test.cpp && \
    echo '#include <boost/thread.hpp>' >> /tmp/boost_test.cpp && \
    echo '#include <boost/filesystem.hpp>' >> /tmp/boost_test.cpp && \
    echo '#include <iostream>' >> /tmp/boost_test.cpp && \
    echo 'int main(){ std::cout << "Boost " << BOOST_VERSION << " components available" << std::endl; return 0; }' >> /tmp/boost_test.cpp && \
    g++ -std=c++11 /tmp/boost_test.cpp -o /tmp/boost_test -lboost_system -lboost_thread -lboost_filesystem -lboost_serialization -lboost_log -lboost_log_setup -pthread && \
    /tmp/boost_test && \
    rm -f /tmp/boost_test.cpp /tmp/boost_test && \
    echo "=========================="

# ==========================================
# STEP 6: Build SLAM-Share System (Following owner's build.sh)
# ==========================================

# Set up 2021-era build environment to match author's setup
ENV CFLAGS="-O3 -march=native -Wno-deprecated-declarations -Wno-maybe-uninitialized"
ENV CXXFLAGS="-O3 -march=native -Wno-deprecated-declarations -Wno-maybe-uninitialized -Wno-reorder"

# Additional environment variables for 2021 compatibility
ENV CMAKE_C_FLAGS="-Wall -O3 -march=native -Wno-deprecated-declarations -Wno-maybe-uninitialized"
ENV CMAKE_CXX_FLAGS="-Wall -O3 -march=native -Wno-deprecated-declarations -Wno-maybe-uninitialized -Wno-reorder"

# Copy source code into container
COPY . /slam-share/

# Extract vocabulary (as per owner's build.sh)
RUN echo "=== Extracting ORB Vocabulary ===" && \
    cd /slam-share/Vocabulary && \
    tar -xf ORBvoc.txt.tar.gz && \
    echo "Vocabulary extracted successfully" && \
    echo "=========================="

# Build Thirdparty DBoW2 (as per owner's build.sh with 2021 environment)
RUN echo "=== Building Thirdparty/DBoW2 ===" && \
    cd /slam-share/Thirdparty/DBoW2 && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
             -DCMAKE_C_FLAGS="$CMAKE_C_FLAGS" \
             -DCMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" && \
    make -j$(nproc) && \
    echo "DBoW2 built successfully" && \
    echo "=========================="

# Build Thirdparty g2o (as per owner's build.sh with 2021 environment)
RUN echo "=== Building Thirdparty/g2o ===" && \
    cd /slam-share/Thirdparty/g2o && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
             -DCMAKE_C_FLAGS="$CMAKE_C_FLAGS" \
             -DCMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" && \
    make -j$(nproc) && \
    echo "g2o built successfully" && \
    echo "=========================="

# Build main SLAM-Share library (as per owner's build.sh with 2021 environment)
RUN echo "=== Building SLAM-Share Main Library ===" && \
    cd /slam-share && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
             -DCMAKE_C_FLAGS="$CMAKE_C_FLAGS" \
             -DCMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" && \
    make -j$(nproc) && \
    echo "SLAM-Share library built successfully" && \
    echo "=========================="

# Verify build results
RUN echo "=== Build Verification ===" && \
    echo "Checking built libraries:" && \
    ls -la /slam-share/lib/ && \
    echo "Checking example executables:" && \
    find /slam-share/Examples -name "mono_*" -o -name "stereo_*" -o -name "rgbd_*" | head -5 && \
    echo "=========================="

# Display final build info
RUN echo "=== SLAM-Share Build Complete ===" && \
    cat /etc/os-release | grep VERSION && \
    echo "CMAKE: $(cmake --version | head -1)" && \
    echo "GCC: $(gcc --version | head -1)" && \
    echo "G++: $(g++ --version | head -1)" && \
    echo "MAKE: $(make --version | head -1)" && \
    echo "PYTHON: $(python --version 2>&1)" && \
    echo "OpenCV: $(pkg-config --modversion opencv4 2>/dev/null || pkg-config --modversion opencv 2>/dev/null || echo 'Version check via headers')" && \
    echo "Eigen3: Installed (headers at /usr/include/eigen3)" && \
    echo "Pangolin: Installed (headers at /usr/local/include)" && \
    echo "Boost: Installed (libraries available)" && \
    echo "SLAM-Share: Built successfully" && \
    echo "======================================="

# Default command
CMD ["/bin/bash"]