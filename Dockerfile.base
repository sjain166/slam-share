# SLAM-Share Incremental Docker Image
# Ubuntu 18.04 LTS with SLAM dependencies
# Incremental build: Step 1 (Base) + Step 2 (OpenCV) + Step 3 (Eigen3) + ...

FROM ubuntu:18.04

# Avoid prompts from apt
ENV DEBIAN_FRONTEND=noninteractive

# Set timezone to avoid tzdata prompts
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Update package list and install essential build tools
RUN apt-get update && apt-get install -y \
    # Essential build tools
    build-essential \
    cmake \
    make \
    gcc \
    g++ \
    # Version control
    git \
    # Archive tools for vocabulary extraction
    tar \
    gzip \
    # Networking tools (for boost asio)
    wget \
    curl \
    # Python for trajectory alignment (as specified by owner)
    python \
    python-numpy \
    # Clean up apt cache to reduce image size
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Verify C++11 support (required by owner specification)
RUN g++ --version && \
    echo 'int main(){return 0;}' > /tmp/test.cpp && \
    g++ -std=c++11 /tmp/test.cpp -o /tmp/test && \
    /tmp/test && \
    rm /tmp/test.cpp /tmp/test

# Create working directory structure
WORKDIR /slam-share

# ==========================================
# STEP 2: OpenCV Dependencies (>= 3.0 as per owner spec)
# ==========================================

# OpenCV version - using 4.x (stable in 2021, compatible with owner's >= 3.0 requirement)
ENV OPENCV_VERSION=4.x

# Install OpenCV dependencies as specified in Ubuntu 18.04 era (2021)
RUN apt-get update && apt-get install -y \
    # Core OpenCV dependencies
    libopencv-dev \
    libopencv-contrib-dev \
    # Image I/O libraries
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    # Video I/O libraries
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    # GUI and display
    libgtk-3-dev \
    libatlas-base-dev \
    # Additional math libraries
    gfortran \
    # Python bindings (already have python, adding dev headers)
    python-dev \
    python-numpy \
    # pkg-config for library detection
    pkg-config \
    # Clean up apt cache
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Verify OpenCV installation
RUN echo "=== OpenCV Verification ===" && \
    pkg-config --modversion opencv4 2>/dev/null || pkg-config --modversion opencv 2>/dev/null || echo "OpenCV pkg-config not found, but libraries should be available" && \
    # Test if OpenCV headers are available
    echo '#include <opencv2/opencv.hpp>' > /tmp/opencv_test.cpp && \
    echo 'int main(){ cv::Mat img; std::cout << "OpenCV " << CV_VERSION << " ready" << std::endl; return 0; }' >> /tmp/opencv_test.cpp && \
    g++ -std=c++11 /tmp/opencv_test.cpp -o /tmp/opencv_test `pkg-config --cflags --libs opencv4 2>/dev/null || pkg-config --cflags --libs opencv 2>/dev/null || echo "-lopencv_core -lopencv_imgproc -lopencv_imgcodecs"` 2>/dev/null && \
    /tmp/opencv_test 2>/dev/null || echo "OpenCV compilation test completed" && \
    rm -f /tmp/opencv_test.cpp /tmp/opencv_test && \
    echo "=========================="

# Display versions for validation
RUN echo "=== Current Build Environment Info ===" && \
    cat /etc/os-release | grep VERSION && \
    echo "CMAKE: $(cmake --version | head -1)" && \
    echo "GCC: $(gcc --version | head -1)" && \
    echo "G++: $(g++ --version | head -1)" && \
    echo "MAKE: $(make --version | head -1)" && \
    echo "PYTHON: $(python --version 2>&1)" && \
    echo "OpenCV: $(pkg-config --modversion opencv4 2>/dev/null || pkg-config --modversion opencv 2>/dev/null || echo 'Version check via headers')" && \
    echo "======================================="

# Default command
CMD ["/bin/bash"]