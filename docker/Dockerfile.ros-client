# SLAM-Share ROS Client Container
# Streams camera data via ROS to SLAM-Share server
FROM slam-share:latest

# Install ROS Melodic (compatible with Ubuntu 18.04)
RUN sh -c 'echo "deb http://packages.ros.org/ros/ubuntu bionic main" > /etc/apt/sources.list.d/ros-latest.list' && \
    apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 && \
    apt-get update && \
    apt-get install -y ros-melodic-desktop-full \
                       ros-melodic-cv-bridge \
                       ros-melodic-image-transport \
                       ros-melodic-sensor-msgs \
                       python-rosdep \
                       python-rosinstall \
                       python-rosinstall-generator \
                       python-wstool && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init && rosdep update

# Setup ROS environment
RUN echo "source /opt/ros/melodic/setup.bash" >> ~/.bashrc
ENV ROS_MASTER_URI=http://localhost:11311
ENV ROS_HOSTNAME=localhost

# Create ROS workspace for SLAM-Share
WORKDIR /slam-share/Examples/ROS/ORB_SLAM3

# Apply fix for MonoAR shared memory pointer issues
RUN echo "=== Applying MonoAR shared memory pointer fix ===" && \
    AR_FILE="/slam-share/Examples/ROS/ORB_SLAM3/src/AR/ros_mono_ar.cc" && \
    if [ -f "$AR_FILE" ]; then \
        echo "Adding boost headers to $AR_FILE" && \
        sed -i '/^#include<opencv2\/imgproc\/imgproc.hpp>/a #include<boost/interprocess/offset_ptr.hpp>' "$AR_FILE" && \
        echo "Fixing GetTrackedMapPoints call" && \
        sed -i '/vector<ORB_SLAM3::MapPoint\*> vMPs = mpSLAM->GetTrackedMapPoints();/c\    std::vector<boost::interprocess::offset_ptr<ORB_SLAM3::MapPoint> > vMPsOffset = mpSLAM->GetTrackedMapPoints();\
    vector<ORB_SLAM3::MapPoint*> vMPs;\
    vMPs.reserve(vMPsOffset.size());\
    for(const auto& mp : vMPsOffset) {\
        vMPs.push_back(mp.get());\
    }' "$AR_FILE" && \
        echo "✅ MonoAR fix applied successfully"; \
    else \
        echo "❌ AR file not found: $AR_FILE" && exit 1; \
    fi

# Build ROS examples using cmake (same as server)
RUN /bin/bash -c "source /opt/ros/melodic/setup.bash && \
    export ROS_PACKAGE_PATH=/slam-share/Examples/ROS/ORB_SLAM3:\$ROS_PACKAGE_PATH && \
    mkdir -p build && cd build && \
    cmake .. && \
    make -j\$(nproc) Mono Stereo RGBD Mono_Inertial Stereo_Inertial MonoAR"

# Create client working directory
WORKDIR /slam-share-ros-client
RUN mkdir -p logs datasets config

# Copy default camera configuration
RUN cp /slam-share/Examples/ROS/ORB_SLAM3/Asus.yaml /slam-share-ros-client/config/

# Create ROS client startup script
RUN echo '#!/bin/bash' > /slam-share-ros-client/start-ros-client.sh && \
    echo 'echo "=== SLAM-Share ROS Client Starting ==="' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'source /opt/ros/melodic/setup.bash' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'export ROS_MASTER_URI=http://slam-server:11311' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'export ROS_HOSTNAME=slam-client' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'export ROS_PACKAGE_PATH=/slam-share/Examples/ROS/ORB_SLAM3:$ROS_PACKAGE_PATH' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'echo "ROS Master: $ROS_MASTER_URI"' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'echo "ROS Hostname: $ROS_HOSTNAME"' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'echo "Waiting for ROS master..."' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'until rostopic list > /dev/null 2>&1; do sleep 1; done' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'echo "ROS master available!"' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'echo "Starting SLAM client..."' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'cd /slam-share/Examples/ROS/ORB_SLAM3' >> /slam-share-ros-client/start-ros-client.sh && \
    echo 'rosrun ORB_SLAM3 Mono /slam-share/Vocabulary/ORBvoc.txt /slam-share-ros-client/config/Asus.yaml' >> /slam-share-ros-client/start-ros-client.sh && \
    chmod +x /slam-share-ros-client/start-ros-client.sh

# Create simple camera data publisher for testing
RUN echo '#!/bin/bash' > /slam-share-ros-client/publish-test-images.sh && \
    echo 'source /opt/ros/melodic/setup.bash' >> /slam-share-ros-client/publish-test-images.sh && \
    echo 'export ROS_MASTER_URI=http://slam-server:11311' >> /slam-share-ros-client/publish-test-images.sh && \
    echo 'export ROS_HOSTNAME=slam-client' >> /slam-share-ros-client/publish-test-images.sh && \
    echo 'echo "Publishing test camera data to /camera/image_raw"' >> /slam-share-ros-client/publish-test-images.sh && \
    echo 'rostopic pub /camera/image_raw sensor_msgs/Image "header:' >> /slam-share-ros-client/publish-test-images.sh && \
    echo '  seq: 0' >> /slam-share-ros-client/publish-test-images.sh && \
    echo '  stamp: {secs: 0, nsecs: 0}' >> /slam-share-ros-client/publish-test-images.sh && \
    echo '  frame_id: \"camera\"' >> /slam-share-ros-client/publish-test-images.sh && \
    echo 'height: 480' >> /slam-share-ros-client/publish-test-images.sh && \
    echo 'width: 640' >> /slam-share-ros-client/publish-test-images.sh && \
    echo 'encoding: \"mono8\"' >> /slam-share-ros-client/publish-test-images.sh && \
    echo 'is_bigendian: 0' >> /slam-share-ros-client/publish-test-images.sh && \
    echo 'step: 640' >> /slam-share-ros-client/publish-test-images.sh && \
    echo 'data: []" -r 10' >> /slam-share-ros-client/publish-test-images.sh && \
    chmod +x /slam-share-ros-client/publish-test-images.sh

# Set environment variables for networking
ENV SLAM_SERVER_HOST=slam-server
ENV SLAM_SERVER_PORT=6767
ENV ROS_MASTER_URI=http://slam-server:11311
ENV ROS_HOSTNAME=slam-client

# Default command
CMD ["/slam-share-ros-client/start-ros-client.sh"]