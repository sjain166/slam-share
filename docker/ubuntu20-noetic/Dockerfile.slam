# SLAM-Share Core System with ROS Noetic
# Phase 2: Build SLAM-Share with ROS Noetic support
FROM slam-share-noetic-base:latest

# Copy SLAM-Share source code
COPY . /slam-share/

# Extract vocabulary (as per owner's build.sh)
RUN echo "=== Extracting ORB Vocabulary ===" && \
    cd Vocabulary && \
    tar -xf ORBvoc.txt.tar.gz && \
    echo "Vocabulary extracted successfully" && \
    echo "=========================="

# Build dependencies first (same as successful original build)
WORKDIR /slam-share

# Build DBoW2
RUN echo "=== Building DBoW2 ===" && \
    cd Thirdparty/DBoW2 && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
             -DCMAKE_C_FLAGS="$CMAKE_C_FLAGS" \
             -DCMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" && \
    make -j$(nproc) && \
    echo "DBoW2 built successfully"

# Build g2o
RUN echo "=== Building g2o ===" && \
    cd Thirdparty/g2o && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
             -DCMAKE_C_FLAGS="$CMAKE_C_FLAGS" \
             -DCMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" && \
    make -j$(nproc) && \
    echo "g2o built successfully"

# Build main SLAM-Share library
RUN echo "=== Building SLAM-Share Main Library ===" && \
    cd /slam-share && \
    mkdir -p build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
             -DCMAKE_C_FLAGS="$CMAKE_C_FLAGS" \
             -DCMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS" && \
    make -j$(nproc) && \
    echo "SLAM-Share library built successfully"

# Build ROS nodes with Noetic (including MonoAR - should work with OpenCV 4.x)
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash && \
    export ROS_PACKAGE_PATH=/slam-share/Examples/ROS/ORB_SLAM3:\$ROS_PACKAGE_PATH && \
    cd Examples/ROS/ORB_SLAM3 && \
    mkdir -p build && cd build && \
    cmake .. -DROS_BUILD_TYPE=Release \
             -DCMAKE_C_FLAGS=\"\$CMAKE_C_FLAGS\" \
             -DCMAKE_CXX_FLAGS=\"\$CMAKE_CXX_FLAGS\" && \
    make -j\$(nproc)"

# Create test workspace
WORKDIR /slam-share-test
RUN mkdir -p config data logs

# Copy configuration files
RUN cp /slam-share/Examples/ROS/ORB_SLAM3/Asus.yaml /slam-share-test/config/

# Test scripts for core SLAM functionality
RUN echo '#!/bin/bash' > /slam-share-test/test-core-slam.sh && \
    echo 'echo "=== Testing Core SLAM System ==="' >> /slam-share-test/test-core-slam.sh && \
    echo 'cd /slam-share' >> /slam-share-test/test-core-slam.sh && \
    echo 'echo "✅ Testing non-ROS executables..."' >> /slam-share-test/test-core-slam.sh && \
    echo 'ls -la Examples/' >> /slam-share-test/test-core-slam.sh && \
    echo 'echo "✅ Testing ROS Noetic environment..."' >> /slam-share-test/test-core-slam.sh && \
    echo 'source /opt/ros/noetic/setup.bash' >> /slam-share-test/test-core-slam.sh && \
    echo 'export ROS_PACKAGE_PATH=/slam-share/Examples/ROS/ORB_SLAM3:$ROS_PACKAGE_PATH' >> /slam-share-test/test-core-slam.sh && \
    echo 'roscore &' >> /slam-share-test/test-core-slam.sh && \
    echo 'sleep 5' >> /slam-share-test/test-core-slam.sh && \
    echo 'rostopic list' >> /slam-share-test/test-core-slam.sh && \
    echo 'echo "✅ Checking ROS nodes build..."' >> /slam-share-test/test-core-slam.sh && \
    echo 'ls -la /slam-share/Examples/ROS/ORB_SLAM3/build/' >> /slam-share-test/test-core-slam.sh && \
    echo 'echo "✅ Core SLAM system ready!"' >> /slam-share-test/test-core-slam.sh && \
    chmod +x /slam-share-test/test-core-slam.sh

# Set environment
ENV ROS_PACKAGE_PATH=/slam-share/Examples/ROS/ORB_SLAM3:$ROS_PACKAGE_PATH

CMD ["/bin/bash"]