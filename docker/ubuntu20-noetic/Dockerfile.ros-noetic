# SLAM-Share with ROS Noetic Support - Ubuntu 20.04
# Build incrementally following authors' design with OpenCV 4.x compatibility
FROM slam-share:latest

# Switch to Ubuntu 20.04 base and install ROS Noetic
USER root

# Update sources for Ubuntu 20.04 and install ROS Noetic
RUN echo "deb http://packages.ros.org/ros/ubuntu focal main" > /etc/apt/sources.list.d/ros-latest.list && \
    apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654 && \
    apt-get update && \
    apt-get install -y \
        ros-noetic-desktop-full \
        ros-noetic-cv-bridge \
        ros-noetic-image-transport \
        ros-noetic-sensor-msgs \
        python3-rosdep \
        python3-rosinstall \
        python3-rosinstall-generator \
        python3-wstool \
        python3-catkin-tools && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Initialize rosdep for Noetic
RUN rosdep init && rosdep update

# Setup ROS Noetic environment
RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc
ENV ROS_MASTER_URI=http://localhost:11311
ENV ROS_HOSTNAME=localhost
ENV ROS_DISTRO=noetic

# Build ROS nodes with Noetic (including MonoAR since OpenCV versions are compatible)
WORKDIR /slam-share
RUN /bin/bash -c "source /opt/ros/noetic/setup.bash && \
    export ROS_PACKAGE_PATH=/slam-share/Examples/ROS/ORB_SLAM3:\$ROS_PACKAGE_PATH && \
    cd Examples/ROS/ORB_SLAM3 && \
    rm -rf build && mkdir build && cd build && \
    cmake .. -DROS_BUILD_TYPE=Release && \
    make -j\$(nproc)"

# Create test workspace
WORKDIR /slam-share-ros-noetic-test
RUN mkdir -p config data logs

# Copy configuration files for testing
RUN cp /slam-share/Examples/ROS/ORB_SLAM3/Asus.yaml /slam-share-ros-noetic-test/config/

# Create comprehensive test scripts
RUN echo '#!/bin/bash' > /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'echo "=== Testing ROS Noetic Environment ==="' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'source /opt/ros/noetic/setup.bash' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'export ROS_PACKAGE_PATH=/slam-share/Examples/ROS/ORB_SLAM3:$ROS_PACKAGE_PATH' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'echo "Starting roscore..."' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'roscore &' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'sleep 5' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'echo "✅ Testing rostopic list..."' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'rostopic list' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'echo "✅ Testing rosnode list..."' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'rosnode list' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'echo "✅ Checking available ORB_SLAM3 nodes..."' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'ls -la /slam-share/Examples/ROS/ORB_SLAM3/build/' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'echo "✅ Testing ROS node execution..."' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'echo "Available nodes: Mono, Stereo, RGBD, Mono_Inertial, Stereo_Inertial, MonoAR"' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'echo "Testing Mono node (should not segfault)..."' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'timeout 10 rosrun ORB_SLAM3 Mono /slam-share/Vocabulary/ORBvoc.txt /slam-share-ros-noetic-test/config/Asus.yaml || echo "Node startup test completed"' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    echo 'echo "✅ ROS Noetic environment ready!"' >> /slam-share-ros-noetic-test/test-ros-noetic.sh && \
    chmod +x /slam-share-ros-noetic-test/test-ros-noetic.sh

# Set environment for ROS Noetic
ENV ROS_PACKAGE_PATH=/slam-share/Examples/ROS/ORB_SLAM3:$ROS_PACKAGE_PATH

# Default command - keep container alive for testing
CMD ["/bin/bash"]